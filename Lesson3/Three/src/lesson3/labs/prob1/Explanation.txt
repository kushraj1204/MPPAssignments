The 2 equals comparison in PersonWithJob class gives 2 different result as:
p1.equals(p2)? false
p2.equals(p1)? true

This is mainly because of Inheritance and the way that the equals method is implemented in each of the classes
with instanceOf comparison.

In class PersonWithJob we have,
@Override
public boolean equals(Object aPersonWithJob) {
    if(aPersonWithJob == null) return false;
    if(!(aPersonWithJob instanceof PersonWithJob)) return false;
    PersonWithJob p = (PersonWithJob)aPersonWithJob;
    boolean isEqual = this.getName().equals(p.getName()) &&
            this.getSalary()==p.getSalary();
    return isEqual;
}
In the first case when p1.equals(p2) is being computed, the passed object aPersonWithJob(p2) is a Person instance.
Since PersonWithJob extends from Person, a Person instance can't be equivalent of a PersonWithJob instance, hence
false is returned after comparison from the second line.

On the other hand, in class Person we have:
@Override
	public boolean equals(Object aPerson) {
		if(aPerson == null) return false;
		if(!(aPerson instanceof Person)) return false;
		Person p = (Person)aPerson;
		boolean isEqual = this.name.equals(p.name);
		return isEqual;
	}
In the second case when p2.equals(p1) is being computed, the passed object aPerson(p1) is a PersonWithJob instance.
Since PersonWithJob extends from Person, a PersonWithJob instance can be replaced by a Person instance,
hence it passes the instanceOf check and since further the name is equal in both the cases, true is returned as
the answer.
